import asyncio
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
from aiogram.enums import ParseMode
from config import BOT_TOKEN, PAYMENT_TOKEN

TOKEN = BOT_TOKEN
payment = PAYMENT_TOKEN


bot = Bot(token=TOKEN)
dp = Dispatcher()
CURENCCY = "XTR"

#start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
       [types.KeyboardButton(text="/help")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
    await message.answer("Учебный проект, первоначально создан для удобства вывода огромных данных.\n Чтобы ознакомиться с возможностями бота переходите к /help",
                         parse_mode=ParseMode.HTML
    )


#help
@dp.message(Command("help"))
async def cmd_help(message:types.Message):
    kb = [
        [types.KeyboardButton(text="/donate")],
        [types.KeyboardButton(text="/menu")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("Выберите действия: \n /donate - поддержка автора! \n /menu - Выбор сервиса вывода данных ", reply_markup=keyboard)


#menu
@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="work.ua",
        callback_data ="file_value")
    )
    await message.answer(
        "Какой сервис нужен?",
        reply_markup=builder.as_markup()
    )
@dp.callback_query(F.data == "file_value")
async def send_fiel(callback: types.CallbackQuery):
    fiel = FSInputFile('data.csv')
    await callback.message.answer_document(fiel, caption="work.ua")


@dp.message(F.text.lower() == "привет")
async def Hi_message(message: types.Message):
    await message.answer(f"Привет, <b>{message.from_user.full_name}</b>",
    parse_mode=ParseMode.HTML)

def payment_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text=f"Оплатить 1 ", pay=True)

    return builder.as_markup()


#donate
@dp.message(Command("donate"))
async def cmd_donate(message: types.Message):
    price = [LabeledPrice(label=CURENCCY, amount=5)]
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="Поддержка донатом!)",
        description="5 звезд",
        payload="channel_support",
        provider_token=payment,
        currency=CURENCCY,
        prices=price,
        start_parameter="tester-bot",
        reply_markup=payment_keyboard(),
    )

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    await message.answer(f"{message.successful_payment.telegram_payment_charge_id}")

@dp.message(F.content_type == types.ContentType.SUCCESSFUL_PAYMENT)
async def succes(message: types.Message):
    await message.answer(f"Операция прошла успешно: {message.successful_payment.order_info}")


#main
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
